name: Terraform

on:
  workflow_call:
    inputs:
      command:
        description: Either plan, apply, plan+apply or destroy from deploy-envs workflow.
        type: string
        required: true
      environment:
        description: The specific environment of the deployment.
        type: string
        required: true
      working-directory:
        description: Path to TF module to execute.
        type: string
        required: true

jobs:
  terraform:
    name: terraform ${{ inputs.command }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_CERTIFICATE_PASSWORD: ""
      ARM_CLIENT_PFX_BASE64: ${{ secrets.ARM_CLIENT_PFX_BASE64 }}
    
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load default variables
        uses: ./.github/actions/load-variables
        with:
          path: ${{ github.workspace }}/src/terraform/vars/vars-defaults.yml

      - name: Load environment-specific variables
        uses: ./.github/actions/load-variables
        with:
          path: ${{ github.workspace }}/src/terraform/vars/vars-${{ inputs.environment }}.yml

      - name: Install IaC tooling
        uses: ./.github/actions/install-dependencies
        with:
          azure-cli: latest

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.terraform_version }}

      # Note: need to use the Azure CLI to login with a certificate because the official 
      # GitHub MSFT Azure Login Action does not support certificate authentication.
      - name: Azure login
        run: |
          set +x  # disable command echoing

          TMP_PFX_FILE=$(mktemp) # Create secure temporary file for the input PFX
          TMP_PEM_FILE=$(mktemp) # Create secure temporary file for the extracted PEM certificate
          trap "rm -f $TMP_PFX_FILE $TMP_PEM_FILE" EXIT  # cleanup both temp files

          echo "$ARM_CLIENT_PFX_BASE64" | base64 -d > "$TMP_PFX_FILE"
          openssl pkcs12 -in "$TMP_PFX_FILE" -out "$TMP_PEM_FILE" -nodes -passin pass:$ARM_CLIENT_CERTIFICATE_PASSWORD

          az login --service-principal --username $ARM_CLIENT_ID --certificate "$TMP_PEM_FILE" --tenant $ARM_TENANT_ID
          az account set --subscription $ARM_SUBSCRIPTION_ID        

      - name: Initialize Terraform State Store Account
        uses: ./.github/actions/initialize-tfstatestore-account
        with:
          location: ${{ env.TF_VAR_backend_location }}
          rgName: ${{ env.TF_VAR_backend_resource_group_name }}
          saName: ${{ env.TF_VAR_backend_storage_account_name }}

      - name: Initialize Terraform State Store Container
        uses: ./.github/actions/initialize-tfstatestore-container
        with:
          rgName:  ${{ env.TF_VAR_backend_resource_group_name }}
          saName: ${{ env.TF_VAR_backend_storage_account_name }}
          saContainerName: ${{ env.TF_VAR_backend_storage_container_name }}
          spApplicationId: ${{ secrets.CLIENT_ID }}