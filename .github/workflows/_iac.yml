name: Terraform

on:
  workflow_call:
    inputs:
      command:
        description: Either plan, apply, plan+apply or destroy from deploy-envs workflow.
        type: string
        required: true
      environment:
        description: The specific environment of the deployment.
        type: string
        required: true
      working-directory:
        description: Path to TF module to execute.
        type: string
        required: true

jobs:
  terraform:
    name: terraform ${{ inputs.command }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_CERTIFICATE_PASSWORD: ""
      ARM_CLIENT_PFX_BASE64: ${{ secrets.ARM_CLIENT_PFX_BASE64 }}
    
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load default variables
        uses: ./.github/actions/load-variables
        with:
          path: ${{ github.workspace }}/src/terraform/vars/vars-defaults.yml

      - name: Load environment-specific variables
        uses: ./.github/actions/load-variables
        with:
          path: ${{ github.workspace }}/src/terraform/vars/vars-${{ inputs.environment }}.yml

      - name: Install IaC tooling
        uses: ./.github/actions/install-dependencies
        with:
          azure-cli: latest

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.terraform_version }}

      # Note: need to use the Azure CLI to login with a certificate because the official 
      # GitHub MSFT Azure Login Action does not support certificate authentication.
      - name: Azure login
        run: |
          set +x  # disable command echoing

          TMP_PFX_FILE=$(mktemp) # Create secure temporary file for the input PFX
          TMP_PEM_FILE=$(mktemp) # Create secure temporary file for the extracted PEM certificate

          # Store their paths across steps
          echo "TMP_PFX_FILE=$TMP_PFX_FILE" >> $GITHUB_ENV
          echo "TMP_PEM_FILE=$TMP_PEM_FILE" >> $GITHUB_ENV

          echo "$ARM_CLIENT_PFX_BASE64" | base64 -d > "$TMP_PFX_FILE"
          openssl pkcs12 -in "$TMP_PFX_FILE" -out "$TMP_PEM_FILE" -nodes -passin pass:$ARM_CLIENT_CERTIFICATE_PASSWORD

          az login --service-principal --username $ARM_CLIENT_ID --certificate "$TMP_PEM_FILE" --tenant $ARM_TENANT_ID
          az account set --subscription ${{ env.TF_VAR_subscription_id }}    

      - name: Initialize Terraform State Store Account
        uses: ./.github/actions/initialize-tfstatestore-account
        with:
          location: ${{ env.TF_VAR_location }}
          rgName: ${{ env.TF_VAR_backend_resource_group_name }}
          saName: ${{ env.TF_VAR_backend_storage_account_name }}

      - name: Initialize Terraform State Store Container
        uses: ./.github/actions/initialize-tfstatestore-container
        with:
          rgName:  ${{ env.TF_VAR_backend_resource_group_name }}
          saName: ${{ env.TF_VAR_backend_storage_account_name }}
          saContainerName: ${{ env.TF_VAR_backend_storage_container_name }}
          spApplicationId: ${{ secrets.CLIENT_ID }}

      - name: Terraform init core
        if: inputs.working-directory == ${{ env.working_directory_core }}
        run: |
          #fabricate tfbackend file
          FILENAME=${{ env.terraform_backend_filename }}

          printf "environment          = \"${{ env.arm_environment }}\"\n" >> $FILENAME
          printf "subscription_id      = \"${{ env.TF_VAR_subscription_id }}\"\n" >> $FILENAME
          printf "resource_group_name  = \"${{ env.TF_VAR_backend_resource_group_name }}\"\n" >> $FILENAME
          printf "storage_account_name = \"${{ env.TF_VAR_backend_storage_account_name }}\"\n" >> $FILENAME
          printf "container_name       = \"${{ env.TF_VAR_backend_storage_container_name }}\"\n" >> $FILENAME
          printf "key                  = \"${{ env.TF_VAR_backend_key }}\"\n" >> $FILENAME

          cat $FILENAME

          terraform init -backend-config=$FILENAME

      - name: Terraform plan
        if: inputs.command == 'plan' || inputs.command == 'plan+apply'
        run: |
          TFPLAN_FILE=terraform-plan-${{ inputs.environment }}-${{ github.run_id }}.tfplan
          echo "TFPLAN_FILE=$TFPLAN_FILE" >> $GITHUB_ENV
                  
          terraform plan \
            -refresh=false \
            -input=false \
            -out ${{ github.workspace }}/$
            
          terraform show ${{ github.workspace }}/$TFPLAN_FILE >> ${{{ github.workspace }}/$TFPLAN_FILE.txt}

      - name: Cleanup Azure cert files
        if: always()
        run: |
          set +x
          rm -f "$TMP_PFX_FILE" "$TMP_PEM_FILE"